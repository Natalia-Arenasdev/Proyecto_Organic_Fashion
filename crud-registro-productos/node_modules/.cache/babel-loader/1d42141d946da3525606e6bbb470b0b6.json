{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jose David\\\\Desktop\\\\CRUD\\\\crud-registro-productos\\\\src\\\\forms\\\\EditProductForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditProductForm = props => {\n  _s();\n\n  const [product, setProduct] = useState(props.currenProduct);\n  useEffect(() => {\n    setProduct(props.currentProduct);\n  }, [props]); // You can tell React to skip applying an effect if certain values haven’t changed between re-renders. [ props ]\n\n  const handleInputChange = event => {\n    const {\n      descripcion,\n      value\n    } = event.target;\n    setProduct({ ...product,\n      [descripcion]: value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: event => {\n      event.preventDefault();\n      props.updateProduct(product.id, product);\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: \" Descripci\\xF3n \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"descripcion\",\n      value: product.descripcion,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \" Marca \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"marca\",\n      value: product.marca,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \" Valor Unit \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"marca\",\n      value: product.valor,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \" Estado \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"estado\",\n      value: product.estado,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Actualizar Producto\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => props.setEditing(false),\n      className: \"button muted-button\",\n      children: \"Cancelar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EditProductForm, \"j4FcUEdH+sCr7MbFDSYQ3STOKpc=\");\n\n_c = EditProductForm;\nexport default EditProductForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditProductForm\");","map":{"version":3,"sources":["C:/Users/Jose David/Desktop/CRUD/crud-registro-productos/src/forms/EditProductForm.js"],"names":["React","useState","useEffect","EditProductForm","props","product","setProduct","currenProduct","currentProduct","handleInputChange","event","descripcion","value","target","preventDefault","updateProduct","id","marca","valor","estado","setEditing"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAEA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAAA;;AAC/B,QAAM,CAAEC,OAAF,EAAWC,UAAX,IAA0BL,QAAQ,CAACG,KAAK,CAACG,aAAP,CAAxC;AAEAL,EAAAA,SAAS,CACP,MAAM;AACJI,IAAAA,UAAU,CAACF,KAAK,CAACI,cAAP,CAAV;AACD,GAHM,EAIP,CAAEJ,KAAF,CAJO,CAAT,CAH+B,CAS/B;;AAEA,QAAMK,iBAAiB,GAAGC,KAAK,IAAI;AACjC,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBF,KAAK,CAACG,MAArC;AAEAP,IAAAA,UAAU,CAAC,EAAE,GAAGD,OAAL;AAAc,OAACM,WAAD,GAAeC;AAA7B,KAAD,CAAV;AACD,GAJD;;AAMA,sBACE;AACE,IAAA,QAAQ,EAAEF,KAAK,IAAI;AACjBA,MAAAA,KAAK,CAACI,cAAN;AAEAV,MAAAA,KAAK,CAACW,aAAN,CAAoBV,OAAO,CAACW,EAA5B,EAAgCX,OAAhC;AACD,KALH;AAAA,4BAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF,eAQE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,aAAxB;AAAsC,MAAA,KAAK,EAAEA,OAAO,CAACM,WAArD;AAAkE,MAAA,QAAQ,EAAEF;AAA5E;AAAA;AAAA;AAAA;AAAA,YARF,eASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATF,eAUE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,OAAxB;AAAgC,MAAA,KAAK,EAAEJ,OAAO,CAACY,KAA/C;AAAsD,MAAA,QAAQ,EAAER;AAAhE;AAAA;AAAA;AAAA;AAAA,YAVF,eAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF,eAYE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,OAAxB;AAAgC,MAAA,KAAK,EAAEJ,OAAO,CAACa,KAA/C;AAAsD,MAAA,QAAQ,EAAET;AAAhE;AAAA;AAAA;AAAA;AAAA,YAZF,eAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAbF,eAcE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,QAAxB;AAAiC,MAAA,KAAK,EAAEJ,OAAO,CAACc,MAAhD;AAAwD,MAAA,QAAQ,EAAEV;AAAlE;AAAA;AAAA;AAAA;AAAA,YAdF,eAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAfF,eAgBE;AAAQ,MAAA,OAAO,EAAE,MAAML,KAAK,CAACgB,UAAN,CAAiB,KAAjB,CAAvB;AAAgD,MAAA,SAAS,EAAC,qBAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CAvCD;;GAAMjB,e;;KAAAA,e;AAyCN,eAAeA,eAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nconst EditProductForm = props => {\r\n  const [ product, setProduct ] = useState(props.currenProduct)\r\n\r\n  useEffect(\r\n    () => {\r\n      setProduct(props.currentProduct)\r\n    },\r\n    [ props ]\r\n  )\r\n  // You can tell React to skip applying an effect if certain values haven’t changed between re-renders. [ props ]\r\n\r\n  const handleInputChange = event => {\r\n    const { descripcion, value } = event.target\r\n\r\n    setProduct({ ...product, [descripcion]: value })\r\n  }\r\n\r\n  return (\r\n    <form\r\n      onSubmit={event => {\r\n        event.preventDefault()\r\n\r\n        props.updateProduct(product.id, product)\r\n      }}\r\n    >\r\n      <label> Descripción </label>\r\n      <input type=\"text\" name=\"descripcion\" value={product.descripcion} onChange={handleInputChange} />\r\n      <label> Marca </label>\r\n      <input type=\"text\" name=\"marca\" value={product.marca} onChange={handleInputChange} />\r\n      <label> Valor Unit </label>\r\n      <input type=\"text\" name=\"marca\" value={product.valor} onChange={handleInputChange} />\r\n      <label> Estado </label>\r\n      <input type=\"text\" name=\"estado\" value={product.estado} onChange={handleInputChange} />\r\n      <button>Actualizar Producto</button>\r\n      <button onClick={() => props.setEditing(false)} className=\"button muted-button\">\r\n        Cancelar\r\n      </button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default EditProductForm;"]},"metadata":{},"sourceType":"module"}